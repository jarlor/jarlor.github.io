<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Personal Blog</title>
  
  <subtitle>Personal Blog of Jarlor Zhang</subtitle>
  <link href="https://www.jarlor.site/atom.xml" rel="self"/>
  
  <link href="https://www.jarlor.site/"/>
  <updated>2024-03-08T07:28:33.089Z</updated>
  <id>https://www.jarlor.site/</id>
  
  <author>
    <name>Jarlor Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WSL2的网络相关问题</title>
    <link href="https://www.jarlor.site/2024/03/08/wsl-network/"/>
    <id>https://www.jarlor.site/2024/03/08/wsl-network/</id>
    <published>2024-03-08T07:23:56.000Z</published>
    <updated>2024-03-08T07:28:33.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像网络模式"><a href="#镜像网络模式" class="headerlink" title="镜像网络模式"></a>镜像网络模式</h1><p>WSL2 的2.0.0版本新增一种网络模式:<a href="https://github.com/microsoft/WSL/releases/tag/2.0.0">Mirrored</a>。这种模式旨在提高 WSL2 和 Host 的网络兼容性问题。这是当下 WSL2 最优的网络解决方案。在接下来的章节中，也将基于该网络模式做介绍。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>启用该网络模式需要将 WSL2 升级至2.0.0+以上版本并在Host中配置<code>.wslconfig</code>文件。</p><ul><li><p>在命令提示符中输入<code>wsl --update</code> 升级WSL2，确保 WSL2 的版本在2.0.0以上。</p></li><li><p>默认情况下，<code>.wslconfig</code> 文件不存在。必须在中创建它并将其存储在您的<code>%UserProfile%</code>目录中才能应用这些配置设置。</p></li><li><p>用于在作为 WSL 2 版本运行的所有已安装的 Linux 发行版中<strong>全局配置</strong>设置。</p></li><li><p><strong>只能用于 WSL 2 运行的分发</strong>。作为 WSL 1 运行的发行版不会受到此配置的影响，因为它们不是作为虚拟机运行的。</p></li><li><p>若要访问你的目录，请在 PowerShell 中用于访问你的主目录（通常是你的用户配置文件），也可以打开 Windows 文件资源管理器并在地址栏中输入<code>%UserProfile%</code>。</p></li><li><p>打开目录后即可创建<code>.wslconfig</code> 文件并写入以下配置项：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[wsl2]<br>networkingMode=mirrored<br>dnsTunneling=<span class="hljs-literal">true</span><br>firewall=<span class="hljs-literal">true</span>![20240308_01](/../images/20240308_01.png)<br>autoProxy=<span class="hljs-literal">true</span><br>[experimental]<br>hostAddressLoopback=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>  可以注意到除了<code>networkingMode=mirrored</code>之外还有其余配置项，这些配置项不建议删除，建议一起写入。</p></li><li><p><code>.wslconfig</code> 文件写入后需重启 WSL2 ：在命令提示符中输入<code>wsl —shutdown</code> 。关闭后再打开WSL2 的shell即可完成重启。</p></li><li><p>此时可以看到WSL和Host的IP一致。</p><p>  <img src="/../images/20240308_01.png" alt="WSL2的网络相关问题"></p><p>  <img src="/../images/20240308_02.png" alt="alt text"></p></li></ul><h1 id="代理网络配置"><a href="#代理网络配置" class="headerlink" title="代理网络配置"></a>代理网络配置</h1><h2 id="系统代理模式"><a href="#系统代理模式" class="headerlink" title="系统代理模式"></a>系统代理模式</h2><p>如果在你的<code>.wslconfig</code> 配置文件中有<code>autoProxy=true</code> 这一项，则Host的系统代理将自动以环境变量的形式添加到 WSL2 中，如下图所示：</p><p><img src="/../images/20240308_03.png"></p><p><img src="/../images/20240308_04.png" alt="alt text"></p><p>在该模式下，第三方软件的代理网络问题仍需要去主动编辑其配置文件才能使代理生效。如Git、pip等。这里推荐TUN 代理模式。</p><h2 id="TUN代理模式"><a href="#TUN代理模式" class="headerlink" title="TUN代理模式"></a>TUN代理模式</h2><p>TUN代理模式在配置完成后，即可实现<strong>全流量代理</strong>，无须关注第三方软件自身的代理配置问题。</p><p>不同代理软件开启TUN模式的方法不一这里不再介绍。</p><p>在开启TUN模式后，基于镜像网络模式的 WSL2 会出现无法上网的情况。原因是由 TUN 创建的虚拟网卡的 mtu 出错。我们只需要将 WSL2 上的所有网卡的 mtu 都设置成 1500 即可解决问题。这里给出配置方法。</p><ul><li><p>编写一个shell脚本，用来将所有网卡的 mtu 设置成 1500。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#用于修复Clash开启TUN模式后导致设置了镜像网络的Clash无法联网的问题的脚本</span><br><span class="hljs-comment"># 获取以 &quot;eth&quot; 开头的网卡名字并循环执行命令</span><br>ip -o <span class="hljs-built_in">link</span> show | awk -F<span class="hljs-string">&#x27;: &#x27;</span> <span class="hljs-string">&#x27;$2 ~ /^eth/&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> -r interface; <span class="hljs-keyword">do</span><br>    /usr/sbin/ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> <span class="hljs-string">&quot;<span class="hljs-variable">$interface</span>&quot;</span> mtu 1500<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个service以达到开机自启动该脚本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=clash tun mtu fix<br>After=network-online.target<br><br>[Service]<br>ExecStart=/bin/bash /root/scripts/mtufix.sh <span class="hljs-comment">#脚本位置的绝对路径。</span><br><br>[Install]<br>WantedBy=multi-user.target                             <br></code></pre></td></tr></table></figure></li><li><p>加载该service并启动，同时观察该service的日志输出。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload <span class="hljs-comment">#重新加载service</span><br>systemctl start mtufix.service <span class="hljs-comment"># 启动该service</span><br>journalctl -u mtufix.service <span class="hljs-comment"># 查看日志</span><br></code></pre></td></tr></table></figure></li><li><p>出现successfully即表示成功</p><p>  <img src="/../images/20240308_05.png" alt="alt text"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;镜像网络模式&quot;&gt;&lt;a href=&quot;#镜像网络模式&quot; class=&quot;headerlink&quot; title=&quot;镜像网络模式&quot;&gt;&lt;/a&gt;镜像网络模式&lt;/h1&gt;&lt;p&gt;WSL2 的2.0.0版本新增一种网络模式:&lt;a href=&quot;https://github.com/micr</summary>
      
    
    
    
    <category term="WSL2" scheme="https://www.jarlor.site/categories/WSL2/"/>
    
    
    <category term="网络" scheme="https://www.jarlor.site/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="代理" scheme="https://www.jarlor.site/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="WSL2" scheme="https://www.jarlor.site/tags/WSL2/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX Environment Build</title>
    <link href="https://www.jarlor.site/2024/03/05/latex-env-build/"/>
    <id>https://www.jarlor.site/2024/03/05/latex-env-build/</id>
    <published>2024-03-05T11:23:00.000Z</published>
    <updated>2024-03-06T10:32:40.299Z</updated>
    
    <content type="html"><![CDATA[<p>Latex Projects can be build quicker and better in Linux System. Based on this situation, build a Latex Env in <strong>WSL</strong> is the best plan. We can choose TeX Live as Latex Env, but it is too big to deploy it quickly and easy. <strong>TinyTeX</strong> is a better choose because of smaller size and easier to deploy. It’s important to note that we need to install an R environment(R Env) and master how to quickly install missing packages.</p><h1 id="1-Pre-Env"><a href="#1-Pre-Env" class="headerlink" title="1 Pre-Env"></a>1 Pre-Env</h1><ul><li>WSL</li><li>VS Code in Windows(not in WSL)</li></ul><h1 id="2-Relative-Resource"><a href="#2-Relative-Resource" class="headerlink" title="2 Relative Resource"></a>2 Relative Resource</h1><h2 id="2-1-TinyTeX"><a href="#2-1-TinyTeX" class="headerlink" title="2.1 TinyTeX"></a>2.1 TinyTeX</h2><p><a href="https://yihui.org/tinytex/">TinyTeX - Yihui Xie | 谢益辉</a></p><h3 id="2-1-1-R-Env-Installation"><a href="#2-1-1-R-Env-Installation" class="headerlink" title="2.1.1 R Env Installation"></a>2.1.1 R Env Installation</h3><p>The installation of TinyTex requires the use of R Env. Below is how to install R Env in Ubuntu.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># update indices</span><br>sudo apt update -qq<br><span class="hljs-comment"># install two helper packages we need</span><br>sudo apt install --no-install-recommends software-properties-common dirmngr<br><span class="hljs-comment"># add the signing key (by Michael Rutter) for these repos</span><br><span class="hljs-comment"># To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc </span><br><span class="hljs-comment"># Fingerprint: E298A3A825C0D65DFD57CBB651716619E084DAB9</span><br>wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo <span class="hljs-built_in">tee</span> -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc<br><span class="hljs-comment"># add the R 4.0 repo from CRAN -- adjust &#x27;focal&#x27; to &#x27;groovy&#x27; or &#x27;bionic&#x27; as needed</span><br>sudo add-apt-repository <span class="hljs-string">&quot;deb https://cloud.r-project.org/bin/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span>-cran40/&quot;</span><br><span class="hljs-comment"># install R</span><br>sudo apt install --no-install-recommends r-base<br></code></pre></td></tr></table></figure><h3 id="2-1-2-TinyTex-Installation"><a href="#2-1-2-TinyTex-Installation" class="headerlink" title="2.1.2 TinyTex Installation"></a>2.1.2 TinyTex Installation</h3><p>run <code>R</code> in shell to enter R Env, then run the following command under R Env.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;tinytex&#x27;</span><span class="hljs-punctuation">)</span><br>tinytex<span class="hljs-operator">::</span>install_tinytex<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>Below is a test code to verify whether TinyTex is successfully installed. You should run it in R Env.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># writeLines(c(</span><br><span class="hljs-comment">#   &#x27;\\documentclass&#123;article&#125;&#x27;,</span><br><span class="hljs-comment">#   &#x27;\\begin&#123;document&#125;&#x27;, &#x27;Hello world!&#x27;, &#x27;\\end&#123;document&#125;&#x27;</span><br><span class="hljs-comment"># ), &#x27;test.tex&#x27;)</span><br>tinytex<span class="hljs-operator">::</span>xelatex<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;test.tex&#x27;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="2-1-3-Network-Resolution"><a href="#2-1-3-Network-Resolution" class="headerlink" title="2.1.3 Network Resolution"></a>2.1.3 Network Resolution</h3><p>TinyTex will download and install missing packages from official packages-source automatically during compilation. Maybe you need a mirror source to solve network issue if you are in China. The following is show how to add a mirror source.<br><strong>Attention: Run in Shell, Not in R.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet<br></code></pre></td></tr></table></figure><h3 id="2-1-4-Font-Resolution"><a href="#2-1-4-Font-Resolution" class="headerlink" title="2.1.4 Font Resolution"></a>2.1.4 Font Resolution</h3><p>I don not know how to explain below code, but all the relative blogs tell me must do it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#create a file named local.conf in /etc/fonts/</span><br><span class="hljs-built_in">touch</span> /etc/fonts/local.conf<br><span class="hljs-comment">#edit this file and write</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;&gt; demo.txt</span><br><span class="hljs-string">&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;</span><br><span class="hljs-string">&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;</span><br><span class="hljs-string">&amp;lt;fontconfig&amp;gt;</span><br><span class="hljs-string">&amp;lt;dir&amp;gt;/mnt/c/Windows/Fonts&amp;lt;/dir&amp;gt;</span><br><span class="hljs-string">&amp;lt;/fontconfig&amp;gt;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>Now you can restart your WSL.</p><h2 id="2-2-VS-Code-Plugin"><a href="#2-2-VS-Code-Plugin" class="headerlink" title="2.2 VS Code Plugin"></a>2.2 VS Code Plugin</h2><h3 id="2-2-1-Latex-Workshop-Installation"><a href="#2-2-1-Latex-Workshop-Installation" class="headerlink" title="2.2.1 Latex Workshop Installation"></a>2.2.1 Latex Workshop Installation</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop"></a></p><p>Install this plugin in VS Code market.<br>Copy the configuration below and paste it into the json configuration item about this plugin in VS Code.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onSave&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.message.error.show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onBuilt&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lastUsed&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;double-click&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.synctex.afterBuild.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.latex.tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">// 编译工具和命令</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;-synctex=1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-file-line-error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// &quot;-pdf&quot;,</span><br>        <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;-synctex=1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-interaction=nonstopmode&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-file-line-error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;%DOCFILE%&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// Latex configuration</span><br>  <span class="hljs-attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;xelatex&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;latexmk&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;latexmk&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BibTeX&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;bibtex&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PDFLaTeX&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;pdflatex&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;xelatex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;xelatex&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;tools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;pdflatex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;pdflatex&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;*.aux&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.bbl&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.blg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.idx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.ind&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.lof&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.lot&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.out&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.toc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.acn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.acr&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.alg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.glg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.glo&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.gls&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.ist&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.fls&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.log&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;*.fdb_latexmk&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="3-Demo"><a href="#3-Demo" class="headerlink" title="3 Demo"></a>3 Demo</h2><p>This is a demo about how to compile a Latex Project.</p><p>Target: Succeed to compile <a href="https://github.com/mohuangrui/ucasproposal">ucasproposal</a>.</p><h2 id="3-1-Init-Compilation"><a href="#3-1-Init-Compilation" class="headerlink" title="3.1 Init Compilation"></a>3.1 Init Compilation</h2><p>Compiling this project will missing some packages because TinyTex only have necessary packages. So we should init it in R Env. Usually every new project needs to be initialized once to avoid missing uncommon packages.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ucasproposal/<br><span class="hljs-comment">#enter R Env in project dir.</span><br>R<br><span class="hljs-comment">#begin compile firstly.</span><br>tinytex::xelatex(<span class="hljs-string">&#x27;Thesis.tex&#x27;</span>)<br><span class="hljs-comment">#use q() to quit R Env When compiled.</span><br></code></pre></td></tr></table></figure><p>Succeed to initize compilation if showing picture below:</p><p><img src="/../images/latex_0.png" alt="Untitled"></p><h2 id="3-2-Normal-compilation"><a href="#3-2-Normal-compilation" class="headerlink" title="3.2 Normal compilation"></a>3.2 Normal compilation</h2><p>We can compile easier after initize compilation.</p><ul><li><p>Open this project in VS Code, then show <code>Thesis.tex</code> in tab.</p><p>  <img src="/../images/latex_1.png" alt="Untitled"></p></li><li><p>Click run button or press the shortcut key <code>Ctrl+Alt+B</code>.</p><p>  The compile process is too fast to show. </p></li><li><p>You can get a PDF file named <code>Thesie.pdf</code>.</p><p>  <img src="/../images/latex_2.png" alt="Untitled"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Latex Projects can be build quicker and better in Linux System. Based on this situation, build a Latex Env in &lt;strong&gt;WSL&lt;/strong&gt; is the</summary>
      
    
    
    
    <category term="科研工具" scheme="https://www.jarlor.site/categories/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
    
    <category term="文献" scheme="https://www.jarlor.site/categories/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/%E6%96%87%E7%8C%AE/"/>
    
    
    <category term="LaTeX" scheme="https://www.jarlor.site/tags/LaTeX/"/>
    
    <category term="wsl" scheme="https://www.jarlor.site/tags/wsl/"/>
    
    <category term="R" scheme="https://www.jarlor.site/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>在无特定框架约束的Python项目中实现全局异常处理机制</title>
    <link href="https://www.jarlor.site/2023/10/26/python-cataching-global-exception/"/>
    <id>https://www.jarlor.site/2023/10/26/python-cataching-global-exception/</id>
    <published>2023-10-26T05:43:11.000Z</published>
    <updated>2024-01-04T16:08:32.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>全局异常处理机制通常是成熟的Web框架（如Flask和Django）内置或由专门的错误监控和日志记录平台（如Sentry）提供支持。然而，这些杰出的框架并非为全局异常处理而设计，在一个非框架目标类型的Python项目下仅为一个机制引入它们可能过于笨重。本文旨在通过两种方式打造自定义全局异常处理机制，同时对比两种方式的区别与联系，并给出具体的应用场景。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>装饰器</li><li>python的异常处理</li></ul><h2 id="实现全局异常处理机制"><a href="#实现全局异常处理机制" class="headerlink" title="实现全局异常处理机制"></a>实现全局异常处理机制</h2><p>本章将提供两种实现方式，分别为<strong>基于钩子函数实现</strong>和<strong>基于装饰器实现</strong>。</p><h3 id="预期目标"><a href="#预期目标" class="headerlink" title="预期目标"></a>预期目标</h3><p>在项目主要模块中任意处触发异常，并在一处集中处理异常。</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>首先明确项目结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── by_decorator<br>│   ├── __init__.py<br>│   ├── class_1.py<br>|├── run.py<br>│   └── sub_module<br>│       ├── __init__.py<br>│       └── class_2.py<br>├── by_hook_func<br>│   ├── __init__.py<br>│   ├── class_1.py<br>|├── run.py<br>│   └── sub_module<br>│       ├── __init__.py<br>│       └── class_2.py<br>└── cust_exceptions.py<br></code></pre></td></tr></table></figure><p>其中<code>by_decorator</code>和<code>by_hook_func</code>分别为两种实现方式准备的项目主要模块，<code>cust_exceptions.py</code>为自定义异常。</p><h4 id="定义异常"><a href="#定义异常" class="headerlink" title="定义异常"></a>定义异常</h4><p>在<code>cust_exceptions.py</code>中定义两个自定义异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException_1</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException_2</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="基于钩子函数实现"><a href="#基于钩子函数实现" class="headerlink" title="基于钩子函数实现"></a>基于钩子函数实现</h3><h4 id="定义异常钩子函数及实现代理"><a href="#定义异常钩子函数及实现代理" class="headerlink" title="定义异常钩子函数及实现代理"></a>定义异常钩子函数及实现代理</h4><p>在<code>by_hook_func\__init__.py</code>中定义钩子函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> traceback<br><br><span class="hljs-keyword">from</span> cust_exceptions <span class="hljs-keyword">import</span> CustomException_1, CustomException_2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_global_exceptions</span>(<span class="hljs-params">exc_type, exc_value, exc_traceback</span>):<br>    <span class="hljs-comment"># 自定义全局异常处理函数</span><br>    <span class="hljs-comment"># 在这里你可以执行你的异常处理逻辑，比如记录日志、发送警报等</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">issubclass</span>(exc_type, CustomException_1):<br>        msg = exc_value.args[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功捕捉到异常CustomException_1 Message:<span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">issubclass</span>(exc_type, CustomException_2):<br>        msg = exc_value.args[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功捕捉到异常CustomException_2 Message:<span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>       <span class="hljs-comment">#对于其他的异常，直接输出异常信息</span><br> traceback.print_exception(exc_type, exc_value, exc_traceback)<br><br><span class="hljs-comment">#代理到系统原异常钩子函数</span><br>sys.excepthook = handle_global_exceptions<br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在<code>by_hook_func\run.py</code>中调用类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> by_hook_func.class_1 <span class="hljs-keyword">import</span> Class_1<br><span class="hljs-keyword">from</span> by_hook_func.sub_module.class_2 <span class="hljs-keyword">import</span> Class_2<br><br>class_1 = Class_1()<br>class_2 = Class_2()<br></code></pre></td></tr></table></figure><p>执行结果如下:</p><p><img src="/../images/image-20231026152655651.png" alt="基于钩子函数实现的全局异常处理的测试运行结果"></p><p>可以看到正确捕捉到异常输出相关信息，同时<strong>主动中断程序</strong>。</p><h3 id="基于装饰器实现"><a href="#基于装饰器实现" class="headerlink" title="基于装饰器实现"></a>基于装饰器实现</h3><h4 id="定义全局异常捕捉装饰器"><a href="#定义全局异常捕捉装饰器" class="headerlink" title="定义全局异常捕捉装饰器"></a>定义全局异常捕捉装饰器</h4><p>在<code>by_decorator\__init__.py</code>中定义该装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">from</span> cust_exceptions <span class="hljs-keyword">import</span> CustomException_2, CustomException_1<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">catch_exceptions</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">try</span>:<br>            result = func(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">except</span> CustomException_1 <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 对异常CustomException_1的处理逻辑</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功捕捉到异常CustomException_1&quot;</span>)<br>        <span class="hljs-keyword">except</span> CustomException_2 <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 对异常CustomException_1的处理逻辑</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功捕捉到异常CustomException_2&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><h4 id="应用装饰器"><a href="#应用装饰器" class="headerlink" title="应用装饰器"></a>应用装饰器</h4><p>在<code>by_decorator\class_1.py</code>和<code>by_decorator\sub_module\class_2.py</code>中引发自定义异常，测试是否能被捕捉。</p><p>1.在<code>by_decorator\class_1.py</code>中装饰触发异常的类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> by_decorator <span class="hljs-keyword">import</span> catch_exceptions<br><span class="hljs-keyword">from</span> cust_exceptions <span class="hljs-keyword">import</span> CustomException_1<br><br><span class="hljs-meta">@catch_exceptions</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class_1</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> CustomException_1(<span class="hljs-string">f&quot;我在<span class="hljs-subst">&#123;__file__&#125;</span>中抛出了异常CustomException_1&quot;</span>)<br></code></pre></td></tr></table></figure><p>2.在<code>by_decorator\sub_module\class_2.py</code>中装饰触发异常的类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> by_decorator <span class="hljs-keyword">import</span> catch_exceptions<br><span class="hljs-keyword">from</span> cust_exceptions <span class="hljs-keyword">import</span> CustomException_1<br><br><span class="hljs-meta">@catch_exceptions</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class_2</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">raise</span> CustomException_1(<span class="hljs-string">f&quot;我在<span class="hljs-subst">&#123;__file__&#125;</span>中抛出了异常CustomException_1&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>在<code>by_decorator\run.py</code>中调用类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> by_decorator.class_1 <span class="hljs-keyword">import</span> Class_1<br><span class="hljs-keyword">from</span> by_decorator.sub_module.class_2 <span class="hljs-keyword">import</span> Class_2<br><br>class_1 = Class_1()<br>class_2 = Class_2()<br></code></pre></td></tr></table></figure><p>执行结果如下:</p><p><img src="/../images/image-20231026152115664.png" alt="基于装饰器实现的全局异常处理的测试运行结果"></p><p>可以看到正确捕捉到异常输出相关信息，同时<strong>未主动中断程序</strong>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>综合两种实现方式的测试结果，主要区别就在于触发异常后，基于钩子函数被捕捉的异常被处理后<strong>会中断当前进程</strong>，但是基于装饰器被捕捉的异常被处理后<strong>不会中断当前进程</strong>。</p><p>基于钩子函数的异常捕捉是直接截获了最底层的系统级异常处理。换句话说我们是换掉了系统的异常处理机制。故而处理后直接被判定成引发了系统级别的异常，也就是报错了，自然会中断当前进程。</p><p>而基于装饰器的异常捕捉本质上还是 <code>try except</code>的处理思想。只不过我们通过装饰器的形式将这些处理异常的方法集中到了一起以避免到处写<code>try except</code>。在文件<code>by_decorator\run.py</code>中，我们是调用函数并处理异常的方法本质上如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> by_decorator.class_1 <span class="hljs-keyword">import</span> Class_1<br><span class="hljs-keyword">from</span> by_decorator.sub_module.class_2 <span class="hljs-keyword">import</span> Class_2<br><span class="hljs-keyword">from</span> cust_exceptions <span class="hljs-keyword">import</span> CustomException_1<br><br><span class="hljs-comment"># 原调用及处理方式</span><br><span class="hljs-comment"># class_1 = Class_1()</span><br><span class="hljs-comment"># class_2 = Class_2()</span><br><br><br><span class="hljs-keyword">try</span>:<br>    class_1 = Class_1()<br><span class="hljs-keyword">except</span> CustomException_1 <span class="hljs-keyword">as</span> e:<br>    msg = e.args[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功捕捉到异常CustomException_1 Message:<span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br>class_2 = Class_2()<br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>经上述分析，我们可以get到，基于装饰器的全局异常捕捉本质上是去捕捉那些我们<strong>场景不可调整</strong>的，但具备调试价值的<strong>业务异常</strong>，而基于钩子函数的全局异常捕捉可以去捕捉那些我们完全没预判到的<strong>技术异常</strong>。</p><p>这里提到了几个名词，这些名词的关系如下图所示:</p><p><img src="/../images/image-20231026163824305.png" alt="异常间关系"></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="场景可调整-场景不可调整"><a href="#场景可调整-场景不可调整" class="headerlink" title="场景可调整&#x2F;场景不可调整"></a>场景可调整&#x2F;场景不可调整</h4><hr><p><strong>场景调整：指程序运行现场在触发异常并被处理后，能否回到现场继续执行代码。</strong></p><hr><p><strong>注意！这里的现场不是指当前程序的进程。</strong></p><p>这里给出代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Value of i is 5&quot;</span>)<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e.args[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>这段代码中当<code>i==5</code>时触发了异常并被成功捕捉并处理。可以留意到该异常被捕捉后执行了<code>continue</code>。即跳过本次循环并成功进入了下次循环。这一处理过程即为异常处理后的场景可调整。该段代码执行结果如下:</p><p><img src="/../images/image-20231026163507287.png" alt="异常场景可调整测试结果"></p><h4 id="业务异常-技术异常"><a href="#业务异常-技术异常" class="headerlink" title="业务异常&#x2F;技术异常"></a>业务异常&#x2F;技术异常</h4><hr><p><strong>业务异常：指与应用程序的业务逻辑相关的异常。</strong></p><p><strong>技术异常：指与应用程序的技术方面相关的异常。</strong></p><hr><p>其中业务异常就是指那些通常不是由于编程错误或技术问题引起的，而是由于用户输入、业务规则或外部因素导致的问题。而技术异常通常是由于编程错误、资源不足、网络问题、硬件问题或其他技术因素引起的。</p><p>这里给出代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomFullException</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-comment"># 房型已满异常</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">book_room</span>(<span class="hljs-params">curr_i</span>):<br>    <span class="hljs-keyword">if</span> curr_i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> RoomFullException(curr_i)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;成功预订房间<span class="hljs-subst">&#123;curr_id&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 待预订的房间类型id</span><br>    room_type_ids = [<span class="hljs-number">1001</span>, <span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;1003&#x27;</span>, <span class="hljs-number">1004</span>]<br>    <span class="hljs-keyword">for</span> curr_id <span class="hljs-keyword">in</span> room_type_ids:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 根据当前id预订房间</span><br>            <span class="hljs-built_in">print</span>(book_room(curr_id))<br>        <span class="hljs-keyword">except</span> RoomFullException:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;预订失败,房型<span class="hljs-subst">&#123;curr_id&#125;</span>已满&quot;</span>)<br></code></pre></td></tr></table></figure><p>这是一个根据目标房型ID预订房型的demo。</p><p>可以看出，我们只能成功预订房型ID是偶数的房型。而这个规则可以由酒店管理人员给出。对于程序来说，一旦预订失败，就会抛出<code>RoomFullException</code>的异常，这个异常就是业务异常。</p><p>同样可以注意到，在列表<code>room_type_ids</code>中，有一个元素是<code>&#39;1003&#39;</code>,这是一个字符串，当该ID被函数<code>book_room()</code>调用时，势必会触发<code>TypeError</code>异常，因为在python中，字符串不能做取余操作。像这种异常，即为技术异常。</p><p>这里给出这段程序的运行结果:</p><p><img src="/../images/image-20231026170305000.png" alt="业务异常与技术异常的测试运行结果"></p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>经过前面的分析，我们完全可以将这两种全局异常处理的方法一起使用，达到多级拦截的效果。</p><ul><li>一级拦截:利用 <code>try except </code> 捕捉。先行尝试捕捉场景可调整的异常并正常处理。</li><li>二级拦截:利用基于装饰器的全局异常捕捉机制去捕捉场景不可调整的异常并作补救错误处理。</li><li>三级拦截:利用基于钩子函数的全局异常捕捉机制去捕捉严重错误，并对严重错误抛出前做一定操作，如封装错误等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;全局异常处理机制通常是成熟的Web框架（如Flask和Django）内置或由专门的错误监控和日志记录平台（如Sentry）提供支持。然而，这</summary>
      
    
    
    
    <category term="编程语言" scheme="https://www.jarlor.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Python" scheme="https://www.jarlor.site/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
    <category term="python" scheme="https://www.jarlor.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop生态集群快速搭建(Powerd by Docker、Ambari)</title>
    <link href="https://www.jarlor.site/2023/10/15/hadoop-on-docker/"/>
    <id>https://www.jarlor.site/2023/10/15/hadoop-on-docker/</id>
    <published>2023-10-15T09:09:10.000Z</published>
    <updated>2024-03-06T10:32:40.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在大数据领域，<a href="https://hadoop.apache.org/">Hadoop</a>生态系统是目前最受欢迎的大数据处理框架，它包括Hadoop、Hive、HBase、Spark、Flink等多个关键组件，这些组件可以协同工作，建立出一个全面的大数据处理系统。<br>但是，这些组件的安装和配置(完全分布式集群)是一件非常繁琐的事情。对于想入门大数据，创建一个学习用的大数据环境的同学来说，无疑是一道难以逾越的鸿沟。<br>本文将介绍如何使用<a href="https://www.docker.com/">Docker</a>和<a href="https://ambari.apache.org/">Ambari</a>，在一台主机上快速搭建Hadoop生态集群。</p><h2 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h2><p><strong>本环境搭建下的hadoop生态集群供学习使用，为降低搭建难度，作者刻意弱化了集群安全性部署，故该集群不适用于生产环境。</strong></p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>一台Ubuntu系统的Linux宿主机(支持虚拟机)</p><ol><li>最低内存 6 G。</li><li>最低存储 50 G。</li><li>已经安装并配置好 docker。</li><li>已经安装并配置好git。</li><li>已配置好静态IP。</li><li>可联网(最好可连外网)。</li></ol><p>克隆<a href="https://github.com/jarlor/hadoop_on_docker">Github仓库</a>到Linux宿主机</p><ol><li>这里提供github仓库地址:<a href="https://github.com/jarlor/hadoop_on_docker.git">https://github.com/jarlor/hadoop_on_docker.git</a></li><li><strong>下文的一切操作都将基于克隆下来的仓库所在目录</strong></li></ol><p>下载相关离线软件(资源比较多,约7G)</p><ol><li><p>这里提供百度网盘链接:<a href="https://pan.baidu.com/s/1gTkuPH_IdcZBvwzAK4Ew-A?pwd=here">https://pan.baidu.com/s/1gTkuPH_IdcZBvwzAK4Ew-A?pwd=here</a></p><blockquote><p>注:HDP标准版的软件包远大于此，为进一步精简该包，本下载链接只保留了大数据标准组件。如需更多组件，请去<a href="https://pan.baidu.com/s/110Q_kH6k3h5D_nJhpvUzRw?pwd=here">此链接</a>下载。</p></blockquote></li><li><p>请将文件下载到上一步克隆下来的仓库目录下的software&#x2F;文件夹下。举例如下图:</p></li></ol><p><img src="/../images/image-20231015214723532.png"></p><h2 id="Ambari配置与安装"><a href="#Ambari配置与安装" class="headerlink" title="Ambari配置与安装"></a>Ambari配置与安装</h2><h3 id="编辑全局环境配置"><a href="#编辑全局环境配置" class="headerlink" title="编辑全局环境配置"></a>编辑全局环境配置</h3><p>本小节的目的是配置脚本运行环境必要的参数，涉及到的文件是 <a href="https://github.com/jarlor/hadoop_on_docker/blob/main/cluster_config">hadoop_on_docker&#x2F;cluster_config</a>。</p><p>请根据注释填写相关配置项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#集群参数配置</span><br><br><br><span class="hljs-comment">#本机ip</span><br><span class="hljs-built_in">export</span> host_ip=<span class="hljs-string">&#x27;192.168.100.100&#x27;</span><br><span class="hljs-comment">#网卡名</span><br><span class="hljs-built_in">export</span> netcard_name=<span class="hljs-string">&#x27;ens33&#x27;</span><br><span class="hljs-comment">#网关</span><br><span class="hljs-built_in">export</span> host_gateway=<span class="hljs-string">&#x27;192.168.100.2&#x27;</span> <br><span class="hljs-comment">#网段</span><br><span class="hljs-built_in">export</span> host_subnet=<span class="hljs-string">&#x27;192.168.100.0/24&#x27;</span><br><span class="hljs-comment">#自定义节点ip</span><br><span class="hljs-built_in">export</span> ip_hadoop1=<span class="hljs-string">&#x27;192.168.100.101&#x27;</span><br><span class="hljs-built_in">export</span> ip_hadoop2=<span class="hljs-string">&#x27;192.168.100.102&#x27;</span><br><span class="hljs-built_in">export</span> ip_hadoop3=<span class="hljs-string">&#x27;192.168.100.103&#x27;</span><br><br><span class="hljs-comment">#jdk文件路径</span><br><span class="hljs-built_in">export</span> jdk_file_path=<span class="hljs-string">&#x27;./software/jdk-8u212-linux-x64.tar.gz&#x27;</span><br><span class="hljs-built_in">export</span> jdk_file_name=<span class="hljs-string">&#x27;jdk-8u212-linux-x64.tar.gz&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注:<code>jdk文件路径</code>参数暂不支持修改(当前版本暂不支持自定义jdk路径，后期计划支持)</strong></p><h3 id="提高待运行脚本权限"><a href="#提高待运行脚本权限" class="headerlink" title="提高待运行脚本权限"></a>提高待运行脚本权限</h3><p>本小节的目的是赋予脚本<a href="https://github.com/jarlor/hadoop_on_docker/blob/main/cluster-control">hadoop_on_docker&#x2F;cluster-control</a>可执行权限。相关操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./cluster-control<br></code></pre></td></tr></table></figure><h3 id="部署Ambari集群"><a href="#部署Ambari集群" class="headerlink" title="部署Ambari集群"></a>部署Ambari集群</h3><p>本小节的目的是开始部署hadoop生态集群，将执行脚本<a href="https://github.com/jarlor/hadoop_on_docker/blob/main/cluster-control">hadoop_on_docker&#x2F;cluster-control</a>。相关操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./cluster-control build<br></code></pre></td></tr></table></figure><p>注:该脚本支持多种操作，baokuo</p><p>出现以下截图内容视为启动成功:</p><p><img src="/../images/image-20231015230011968.png" alt="集群部署成功标识"></p><p><strong>注:如果找不到截图中的内容，大概率是日志输出太多被刷上去了。脚本未报错退出也可视为部署成功。</strong></p><h3 id="配置与安装Ambari"><a href="#配置与安装Ambari" class="headerlink" title="配置与安装Ambari"></a>配置与安装Ambari</h3><p>本小节的目的是配置Ambari-大数据集群管理系统，后续的大数据组件(DHFS，Zookeeper等)都可经Ambari一键安装。</p><p>1.打开浏览器，进入<code>ambari web</code>端页面(如下图所示)。地址格式为<strong>http:&#x2F;&#x2F;&lt;Linux宿主机本机ip地址&gt;:8080</strong>。</p><blockquote><p>例:我的Linux宿主机本机ip地址为<code>192.168.100.100</code>,即地址为 <a href="http://192.168.100.100:8080/">http://192.168.100.100:8080</a></p></blockquote><p><img src="/../images/image-20231015231151885.png" alt="ambri web端页面"></p><p>2.登录<code>ambari</code>(登录成功后页面如下图所示),<code>username</code>和<code>password</code>如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">username:admin<br>password:admin<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231015231733821.png" alt="ambari登录成功页面"></p><p>3.点击<code>LAUNCH INSTALL WIZARD</code>并配置集群名称,此处名称可自定义(如下图所示)。</p><p><img src="/../images/image-20231015232048711.png" alt="配置集群名称"></p><p>4.配置自定义软件源.并在下图红框标识处填下以下信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://httpd:18080/HDP/centos7/3.1.5.0-152/<br>http://httpd:18080/HDP-GPL/centos7/3.1.5.0-152/<br>http://httpd:18080/HDP-UTILS/centos7/1.1.0.22/<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20231015233104611.png" alt="配置自定义软件源"></p><p>5.在指定位置填写集群节点目标主机(如下图红框所示).填写内容如下:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">hadoop1<br>hadoop2<br>hadoop3<br></code></pre></td></tr></table></figure><p><strong>注:此处填写内容为一行一个主机名,注意换行,注意空格。</strong></p><p><img src="/../images/image-20231015233453377.png" alt="集群节点目标主机填写"></p><p>6.还是在这个页面,填写ambari-server的ssh私钥.<strong>请重写打开一个终端</strong>,并输入以下命令获取ambari-server私钥:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it ambari-server <span class="hljs-built_in">cat</span> ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>将上方命令返回的结果完整复制并完整粘贴到下图所示位置:</p><p><img src="/../images/image-20231015234015525.png" alt="配置Ambari客户端ssh私钥"></p><p>*<em>注释:此处粘贴内容依旧要注意换行,注意空格。</em></p><p>7.点击下一步,若弹出<code>Warning</code>则选择 <code>CONTINUE</code>。</p><p>8.进入集群节点的ambari-agent安装界面，等待安装成功即可点击<code>NEXT</code>(成功界面入下图所示)。</p><p>弹出<code>Host Check Warning</code>选择<code>OK</code>。</p><p><img src="/../images/image-20231015234802076.png" alt="集群节点ambari-agent安装成功界面"></p><h2 id="安装大数据组件"><a href="#安装大数据组件" class="headerlink" title="安装大数据组件"></a>安装大数据组件</h2><p>前一章已经完成ambari-server和ambari-agent的配置与安装，为本章安装大数据组件提供了十分高效的环境。</p><p>本章将承接上一章的安装进度,继续安装常用的大数据组件:HDFS、YARN、MapReduce等。</p><h3 id="勾选目标大数据组件"><a href="#勾选目标大数据组件" class="headerlink" title="勾选目标大数据组件"></a>勾选目标大数据组件</h3><p>本小节的目的是选择我们要安装的大数据组件，如下图所示:</p><p><img src="/../images/image-20231015235837102.png" alt="要安装的大数据组件"></p><p>勾选完成后点击<code>NEXT</code>。弹出<code>Limited Functionality Warning</code>请选择<code>PROCEED ANYWAY</code>。</p><h3 id="集群节点间分配组件"><a href="#集群节点间分配组件" class="headerlink" title="集群节点间分配组件"></a>集群节点间分配组件</h3><p>本小节的目的是在集群节点间分配组件，此处取ambari默认给出的分配结果即可(如下图所示)。</p><p><img src="/../images/image-20231016000348606.png" alt="ambari默认分配组件结果"></p><p>点击<code>NEXT</code>。</p><h3 id="集群节点间配置主从关系"><a href="#集群节点间配置主从关系" class="headerlink" title="集群节点间配置主从关系"></a>集群节点间配置主从关系</h3><p>本小节的目的是在集群节点间配置部分组件的主从关系。此处<strong>不取</strong>ambari默认给出的配置结果。调整配置结果如下图所示:</p><p><img src="/../images/image-20231016000752830.png" alt="集群节点间主从关系配置"></p><p>点击<code>NEXT</code>。</p><h3 id="配置部分组件账号密码"><a href="#配置部分组件账号密码" class="headerlink" title="配置部分组件账号密码"></a>配置部分组件账号密码</h3><p>本小节的目的在于配置<code>Grafana</code>和<code>HDFS</code>管理员账号和密码(如下图所示)。<strong>建议密码都设置成admin</strong>，方便记忆及后续管理。</p><p> <img src="/../images/image-20231016001214719.png" alt="Grafana和HDFS账号密码配置"></p><p>输入完成后点击<code>NEXT</code>。</p><h3 id="配置数据目录"><a href="#配置数据目录" class="headerlink" title="配置数据目录"></a>配置数据目录</h3><p>本小节的目的在于配置集群的数据持久化目录。此处取ambari默认给出的目录地址即可(如下图所示)。</p><p><img src="/../images/image-20231016001450332.png" alt="ambari默认给出的数据目录"></p><p>点击<code>NEXT</code>。</p><h3 id="配置各组件管理员账号"><a href="#配置各组件管理员账号" class="headerlink" title="配置各组件管理员账号"></a>配置各组件管理员账号</h3><p>本小节的目的在于配置集群各组件的账号。此处取ambari默认给出的结果即可(如下图所示)。</p><p><img src="/../images/image-20231016001649302.png" alt="ambari默认给出的账号分配"></p><p>点击<code>NEXT</code>。</p><h3 id="组件资源管理配置"><a href="#组件资源管理配置" class="headerlink" title="组件资源管理配置"></a>组件资源管理配置</h3><p>本小节的目的在于配置集群各组件的资源消耗管理。此处取ambari默认给出的结果即可(如下图所示)。</p><p><img src="/../images/image-20231016001917507.png" alt="ambari默认给出的组件资源管理配置"></p><p>点击<code>NEXT</code>。</p><h3 id="开始部署组件"><a href="#开始部署组件" class="headerlink" title="开始部署组件"></a>开始部署组件</h3><p>本小节开始部署各组件。</p><p>在部署前ambari要求确认部署配置信息(如下图所示)。读者确认无误后可点击<code>DEPLOY</code>。</p><p><img src="/../images/image-20231016002126440.png" alt="确认部署配置信息界面"></p><p>点击<code>DEPLOY</code>后进入正式安装界面(如下图所示)。部署耗时很长，等着吧。</p><p><img src="/../images/image-20231016002248259.png" alt="各组件部署进度界面"></p><p>出现以下界面视为部署成功:</p><p><img src="/../images/image-20231016095714323.png" alt="组件部署成功页面"></p><p>点击<code>NEXT</code>，获取集群节点间组件分配概述(如下图所示)。</p><p><img src="/../images/image-20231016095953950.png" alt="集群节点间组件分配概述"></p><p>点击<code>COMPLETE</code>，跳转至Ambari资源看板(如下图所示)。</p><p><img src="/../images/image-20231016100630253.png" alt="AMbari资源看板"></p><p><strong>至此,COMPLETE!</strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本项目已在Github开源，地址为:<a href="https://github.com/jarlor/hadoop_on_docker">https://github.com/jarlor/hadoop_on_docker</a> 。</p><p>本文并未介绍过多的技术细节(计划出一篇博客单独介绍)，侧重快速应用这一项目去搭建环境。由于是新生项目，还有众多可优化点，欢迎各位同学来github提Issue和PR。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.wangqi.love/articles/docker/ubuntu%2022.04%20%E7%9A%84cgroup%E9%97%AE%E9%A2%98.html">ubuntu 22.04 的cgroup问题 | wangqi的blog</a></p><p><a href="https://smalloutcome.com/2021/07/18/Docker-%E4%BD%BF%E7%94%A8-macvlan-%E7%BD%91%E7%BB%9C%E5%AE%B9%E5%99%A8%E4%B8%8E%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/">Docker 使用 macvlan 网络容器与宿主机的通信过程 | 一小步</a></p><p><a href="https://www.cnblogs.com/liugp/p/17489616.html">通过 docker-compose 快速部署 Apache Ambari 保姆级教程 - 大数据老司机 - 博客园</a></p><p><a href="https://blog.csdn.net/kwame211/article/details/105635459">Ambari Confirm Hosts Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).-CSDN博客</a></p><p><a href="https://www.ly-zone.cloud/archives/docker%E9%83%A8%E7%BD%B2ambari-273%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BE%A4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAmd">Docker部署ambari-2.7.3（大数据集群快速搭建）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在大数据领域，&lt;a href=&quot;https://hadoop.apache.org/&quot;&gt;Hadoop&lt;/a&gt;生态系统是目前最受欢迎的大数据处</summary>
      
    
    
    
    <category term="大数据" scheme="https://www.jarlor.site/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hadoop" scheme="https://www.jarlor.site/tags/hadoop/"/>
    
    <category term="docker" scheme="https://www.jarlor.site/tags/docker/"/>
    
    <category term="bigdata" scheme="https://www.jarlor.site/tags/bigdata/"/>
    
  </entry>
  
</feed>
